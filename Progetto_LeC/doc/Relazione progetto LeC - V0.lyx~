#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
customHeadersFooters
foottoend
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing onehalf
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/logo unibg.jpg
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
UNIVERSITÃ€ DEGLI STUDI DI BERGAMO
\end_layout

\begin_layout Standard
\begin_inset VSpace 5cm
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
\size largest
Progetto:
\begin_inset Newline newline
\end_inset

Linguaggio di definizione obj 
\end_layout

\begin_layout Standard
\begin_inset VSpace 5cm
\end_inset


\end_layout

\begin_layout Standard

\series bold
\size larger
Esame:
\series default
 Linguaggi e compilatori
\end_layout

\begin_layout Standard

\series bold
\size larger
Docente:
\series default
 Prof.
 Giuseppe Psaila
\end_layout

\begin_layout Standard

\series bold
\size larger
Anno accademico:
\series default
 2013/2014
\end_layout

\begin_layout Standard
\begin_inset VSpace 2cm
\end_inset


\end_layout

\begin_layout Standard

\series bold
\size larger
Redattore:
\series default
 Matteo Ronchi, Stefano Pessina
\end_layout

\begin_layout Standard

\series bold
\size larger
Revisione:
\series default
 0.0
\end_layout

\begin_layout Standard

\series bold
\size larger
Data:
\series default
 24/02/2014
\size default

\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{roman}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*

\series bold
\size larger
Storia delle revisioni:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="10text%">
<column alignment="center" valignment="top" width="15text%">
<column alignment="center" valignment="top" width="20text%">
<column alignment="left" valignment="top" width="45text%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rev.
 n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Redattore
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Descrizione
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24/02/2013
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Versione iniziale
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\begin_layout Plain Layout


\backslash
setcounter{page}{1}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduzione
\end_layout

\begin_layout Subsection
Analisi del contesto
\end_layout

\begin_layout Subsubsection*
Il formato obj
\end_layout

\begin_layout Standard
Un file object (obj) rappresenta un formato di file sviluppato da Wavefront
 Techonologies utilizzato per la definizione di geometrie 3D.
 Questo formato contiene un elenco di tutte le informazioni per la definizione
 di punti, linee, poligoni, curve e superfici freeform.
 I punti, le linee e i poligoni sono descritti sulla base delle informazioni
 associate ai vertici di cui sono composti, ovvero, posizione, coordinate
 di texture e normali per ogni vertice.
 Le curve e le superfici freeform sono invece definite mediante speciali
 punti di controllo e parametri dipendenti dal tipo di curva (Bezier, B-Spline,
 etc.).
 
\end_layout

\begin_layout Standard
Il formato file obj Ã¨ spesso utilizzato per l'interscambio di oggetti grafici
 tra diverse piattaforme di visualizzazione.
\end_layout

\begin_layout Subsubsection*
Keywords
\end_layout

\begin_layout Standard
La struttura di un file obj Ã¨ molto semplice.
 Non Ã¨ necessario includere alcun header all'inizio del file.
 Per la specifica del formato, ogni riga deve iniziare con una keyword seguita
 dai dati di riferimento per la stessa.
 Spesso la prima riga Ã¨ costituita da un breve commento contenente informazioni
 sull'oggetto/i definito/i nel file.
 I commenti in linea sono sempre preceduti dal carattere "#".
 Si riporta in seguito una lista delle piÃ¹ importanti keywords che possono
 essere individuate in un file obj.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tipo di dato
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Keyword
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Descrizione
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Informazioni sui vertici
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
v
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Coordinate vertice
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Coordinate texture
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vn
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Direzione delle normali
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Elementi grafici
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
p
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Punto
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
l
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linea
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
f
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Faccia
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Raggruppamento
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
g
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nome di un gruppo
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
s
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parametro di smoothing di un gruppo
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
o
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nome di un oggetto
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attributi di display/render
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
usemtl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nome del materiale
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mtllib
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Nome del file mtl di riferimento
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Keywords file obj.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Come si evince dalla tabella riportata, Ã¨ possibile raggruppare le keywords
 in quattro macrocategorie:
\end_layout

\begin_layout Description
Informazioni
\begin_inset space ~
\end_inset

sui
\begin_inset space ~
\end_inset

vertici
\begin_inset space ~
\end_inset

(Vertex
\begin_inset space ~
\end_inset

Data): rappresentati come tre liste, una per ogni keyword (vertici, textures
 e normali).
 Ad ogni elemento di queste liste viene assegnato un indice intero crescente
 partendo dal valore 1.
 L'assegnazione di un indice ad un elemento in una lista Ã¨ completamente
 indipendente dagli indici di ogni altra lista.
 CiÃ² significa che, al primo vertice geometrico che compare nel file ,scorrendol
o dall'alto verso il basso, si assegnerÃ  l'indice 1, al secondo l'indice
 2, e cosÃ¬ via.
 Nel caso di vertici che rappresentano coordinate di texture, il procedimento
 che si segue Ã¨ lo stesso.
 Il primo rilevato avrÃ  indice 1, il secondo 2 e cosÃ¬ via.
 La numerazione continua sequenzialmente per tutta la lunghezza del file.
 Spesso i file hanno dichiarazioni di tipo diverso interfogliate; la numerazione
 continua sequenzialmente, tipo per tipo, anche in questo caso.
\end_layout

\begin_layout Description
Elementi
\begin_inset space ~
\end_inset

grafici
\begin_inset space ~
\end_inset

(Elements): per ogni elemento grafico, gli indici precedentemente descritti
 sono utilizzati per identificare vertici geometrici, coordinate di texture
 o normali al vertice.
\end_layout

\begin_layout Description
Raggruppamento
\begin_inset space ~
\end_inset

():
\end_layout

\begin_layout Description
Attributi
\begin_inset space ~
\end_inset

di
\begin_inset space ~
\end_inset

display/render:
\end_layout

\begin_layout Standard
Qui di seguito si descrivono nel dettaglio.
\end_layout

\begin_layout Subsubsection*
Informazioni sui vertici
\end_layout

\begin_layout Description
Coordinate
\begin_inset space ~
\end_inset

vertice:
\end_layout

\begin_deeper
\begin_layout Description
Sintassi: 
\series bold
v
\series default
 x y z w
\end_layout

\begin_deeper
\begin_layout Description
x,
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

z: sono rispettivamente le coordinate x, y e z del vertice nello spazio.
 Sono definiti come numeri in virgola mobile.
\end_layout

\begin_layout Description
w: (opzionale) specifica una coordinata omogenea utile nel caso in cui bisogna
 rappresentare curve o superfici.
 Se omesso, il valore di default per w Ã¨ 1.0.
\end_layout

\end_deeper
\begin_layout Description
Descrizione: Definisce un vertice geometrico con le rispettive coordinate
 lungo le tre dimensioni (x, y, z).
 I vertici elencati nel file obj, come precedentemente descritto, sono numerati
 in ordine di apparizione.
 CiÃ² significa che il primo vertice sarÃ  etichettato "1", il secondo "2"
 e cosÃ¬ via.
\end_layout

\end_deeper
\begin_layout Description
Coordinate
\begin_inset space ~
\end_inset

texture:
\end_layout

\begin_deeper
\begin_layout Description
Sintassi: 
\series bold
vt
\series default
 u v w
\end_layout

\begin_deeper
\begin_layout Description
u: rappresenta il valore per la direzione orizzontale della texture
\end_layout

\begin_layout Description
v: (opzionale) rappresenta il valore per la direzione verticale della texture.
 Assume di default il valore 0.
\end_layout

\begin_layout Description
w: (opzionale) rappresenta il valore per la profonditÃ  della texture.
 Assume di default il valore 0.
\end_layout

\end_deeper
\begin_layout Description
Descrizione: Specifica un texture vertex e le sue coordinate.
 "u, v, w" sono numeri float compresi tra 0 e 1 che indicano dove mappare
 la texture lungo le tre direzioni.
 Una texture 1D richiede solo la coordinata di texture "u".
 In questo caso gli altri due parametri assumono il valore di default 0.
 Una 2D richiede la specifica delle coordinate 
\begin_inset Quotes eld
\end_inset

u
\begin_inset Quotes erd
\end_inset

 e 
\begin_inset Quotes eld
\end_inset

v
\begin_inset Quotes erd
\end_inset

.
 Una 3D richiede tutti e tre i parametri.
\end_layout

\end_deeper
\begin_layout Description
Direzioni
\begin_inset space ~
\end_inset

delle
\begin_inset space ~
\end_inset

normali:
\end_layout

\begin_deeper
\begin_layout Description
Sintassi: 
\series bold
vn
\series default
 i j k
\end_layout

\begin_deeper
\begin_layout Description
i,
\begin_inset space ~
\end_inset

j,
\begin_inset space ~
\end_inset

k: rappresentano le coordinate i, j e k della normale al vertice.
 Sono espressi come valori float.
 
\end_layout

\end_deeper
\begin_layout Description
Descrizione: Specifica le componenti i, j e k della normale al vertice di
 riferimento.
 Le normali ai vertici pregiudicano il corretto shading per il rendering
 della geometria.
 Per i poligoni le normali definite ai vertici vengono utilizzate al posto
 delle reali normali.
\end_layout

\end_deeper
\begin_layout Subsubsection*
Elementi grafici
\end_layout

\begin_layout Standard
Una volta definiti i vertici, tramite differenti "elementi grafici" Ã¨ possibile
 relazionare queste informazioni per costituire l'oggetto desiderato.
 Possiamo definire cosÃ¬ facce, linee o singoli punti nello spazio.
 I vertici elencati nel file obj sono indicizzati per ordine di apparizione
 nell'elenco.
 Questo vale per ogni categoria di vertice dichiarato.
\end_layout

\begin_layout Description
Punto:
\end_layout

\begin_deeper
\begin_layout Description
Sintassi: 
\series bold
p
\series default
 v1 v2 v3 ....
\end_layout

\begin_layout Description
Descrizione: Specifica un punto nello spazio.
 "v1" Ã¨ la posizione del primo punto corrispondente al primo vertice elencato
 nel file.
 Ovviamente, ogni punto richiede un vertice.
 Possono essere rappresentati molti punti su una singola riga (Es: p v1
 v2 ....
 vN).
\end_layout

\end_deeper
\begin_layout Description
Linea:
\end_layout

\begin_deeper
\begin_layout Description
Sintassi: 
\series bold
l
\series default
 v1/vt1 v2/vt2 ...
\end_layout

\begin_layout Description
Descrizione: Specifica una linea composta da un minimo di 2 punti.
 Ogni "v#" Ã¨ il vertice di un punto in una linea.
 Accanto all'indice del vertice puÃ² essere presente l'informazione sulla
 mappatura di una texture.
 L'informazione sul vertice e sulla texture Ã¨ separata da uno "/" (senza
 includere spazi).
 Una linea puÃ² essere definita senza includere informazione sulla texture
 (Es: l v1 v2).
\end_layout

\end_deeper
\begin_layout Description
Faccia:
\end_layout

\begin_deeper
\begin_layout Description
Sintassi: 
\series bold
f
\series default
 v1/vt1/vn1 v2/vt2/vn2 v3/vt3/vn3...
\end_layout

\begin_layout Description
Descrizione: Specifica una faccia composta da almeno 3 vertici.
 Accanto a ciascun vertice possono essere elencate le informazioni su texture
 e normali.
 L'informazione sulla texture, relativa a un determinato vertice "vt" elencato
 precedentemente, precede sempre l'informazione sulle normali.
 Se vengono incluse le informazioni su texture e normali per un vertice,
 devono essere incluse in tutti i vertici che costituiscono la faccia.
 Nel caso in cui abbiamo solo le informazioni sulla posizione dei vertici
 e le corrispondenti informazioni sulle normali possiamo combinare assieme
 queste informazioni con la seguente sintassi:
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
 
\series bold
f
\series default
 1//1 2//2 3//3 4//4
\end_layout

\end_inset

 La piÃ¹ semplice definizione di una faccia Ã¨ costituita da tre vertici senza
 ulteriori informazioni (Es: f v1 v2 v3).
 I vertici delle facce possono condividere le stesse informazioni su texture
 e/o normali.
\end_layout

\end_deeper
\begin_layout Subsubsection*
Raggruppamento
\end_layout

\begin_layout Standard
In questa sezione vengono analizzate alcune nozioni sul raggruppamento di
 oggetti.
 In questo modo possono essere realizzate collezioni di oggetti (linee,
 facce, vertici, ecc.) che rendono piÃ¹ semplice le future manipolazioni su
 un modello.
\end_layout

\begin_layout Description
Nome
\begin_inset space ~
\end_inset

di
\begin_inset space ~
\end_inset

un
\begin_inset space ~
\end_inset

gruppo:
\end_layout

\begin_deeper
\begin_layout Description
Sintassi: 
\series bold
g
\series default
 group_name_1 group_name2 ....
\end_layout

\begin_layout Description
Descrizione: Definisce il nome del gruppo di appartenenza per un elemento
 grafico.
 Un elemento grafico puÃ² appartenere a piÃ¹ gruppi contemporaneamente.
 Se viene omesso il gruppo, l'elemento grafico viene inserito nel gruppo
 "default".
\end_layout

\end_deeper
\begin_layout Description
Parametro
\begin_inset space ~
\end_inset

di
\begin_inset space ~
\end_inset

smoothing
\begin_inset space ~
\end_inset

di
\begin_inset space ~
\end_inset

un
\begin_inset space ~
\end_inset

gruppo:
\end_layout

\begin_deeper
\begin_layout Description
Sintassi: 
\series bold
s
\series default
 group_number
\end_layout

\begin_layout Description
Descrizione: Questo parametro indica gli elementi sulle quali le normali
 sono interpolate per attribuire all'elemento un'apparenza "smooth".
 Il valore di default Ã¨ "off" o "0"; in questo caso non viene adoperato
 nessun valore di smoothing.
 
\end_layout

\end_deeper
\begin_layout Description
Nome
\begin_inset space ~
\end_inset

di
\begin_inset space ~
\end_inset

un
\begin_inset space ~
\end_inset

oggetto:
\end_layout

\begin_deeper
\begin_layout Description
Sintassi: 
\series bold
o
\series default
 object_name
\end_layout

\begin_layout Description
Descrizione: Parametro opzionale per dare un nome all'oggetto definito subito
 dopo nel file obj.
 Tutti gli elementi di raggruppamento vengono applicati a tutti gli oggetti
 sottostanti nel file fino a quando un nuovo oggetto viene dichiarato.
\end_layout

\end_deeper
\begin_layout Subsubsection*
Attributi di display / render
\end_layout

\begin_layout Description
Nome
\begin_inset space ~
\end_inset

del
\begin_inset space ~
\end_inset

materiale:
\end_layout

\begin_deeper
\begin_layout Description
Sintassi: 
\series bold
usemtl
\series default
 material_name
\end_layout

\begin_layout Description
Descrizione: Definisce il nome del materiale da assegnare all'oggetto.
 Il materiale deve essere definito separatamente in un file mtl.
 
\end_layout

\end_deeper
\begin_layout Description
Nome
\begin_inset space ~
\end_inset

del
\begin_inset space ~
\end_inset

file_mtl_di
\begin_inset space ~
\end_inset

riferimento:
\end_layout

\begin_deeper
\begin_layout Description
Sintassi: 
\series bold
mtllib
\series default
 file_name1 file_name2
\end_layout

\begin_layout Description
Descrizione: Specifica il nome del file mtl contenente i materiali.
 Possono essere definiti piÃ¹ file mtl contemporaneamente.
\end_layout

\end_deeper
\begin_layout Subsection
Scopo del documento
\end_layout

\begin_layout Standard
In questo documento, 
\end_layout

\begin_layout Subsection
Definizioni, abbreviazioni e sigle
\end_layout

\begin_layout Section
Definizione del linguaggio
\end_layout

\begin_layout Section
Definizione della sintassi e del lessico
\end_layout

\begin_layout Subsection
Alfabeto
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Sigma=\{vertex,\, vertexset,\, vtexture,\, textureset,\, vnormal,\, normalset,\, point,
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
line,\, face,\, smoothing,\, group,\, deftex,\, defnorm,\, defsmooth\}
\]

\end_inset


\end_layout

\begin_layout Subsection
Produzioni
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Descrizione della semantica
\end_layout

\begin_layout Standard
Il linguaggio prevede che ad ogni informazione sui vertici o oggetto grafico
 possa essere attribuito un tag, da utilizzare successivamente per richiamare
 l'entitÃ  definita.
 Per supportare questa funzionalitÃ , sono stati previsti i seguenti controlli
 semantici:
\end_layout

\begin_layout Enumerate

\series bold
controllo duplicati
\series default
: non puÃ² essere inserito piÃ¹ di una volta lo stesso tag;
\end_layout

\begin_layout Enumerate

\series bold
controllo tag inesistente
\series default
: per riutilizzare un entitÃ , questa deve essere stata prima definita;
\end_layout

\begin_layout Enumerate

\series bold
controllo di omogeneitÃ 
\series default
: un elemento grafico puÃ² essere definito con o senza texture e/o normali,
 a patto che tutti i vertici siano omogenei.
 Questo significa che tutti i vertici di un elemento grafico sono definiti
 con o senza texture e/o normali.
 Il controllo di omogeneitÃ  si occupa di verificare che un oggetto grafico
 sia appunto omogeneo.
\end_layout

\begin_layout Standard
Ad ognuno dei controlli elencati in precedenza Ã¨ stato attributo un errore
 semantico del parser.
 
\end_layout

\begin_layout Paragraph
Errore nel controllo dei duplicati
\end_layout

\begin_layout Standard
Nel caso di errore nel controllo dei duplicati viene interrotto il parsing
 e visualizzato il messaggio di errore contenente il tag duplicato.
 In seguito Ã¨ riportato un esempio di codice che genera un errore di duplicazion
e.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

vertex v1 = 0.1 1.4 1.6;
\end_layout

\begin_layout Plain Layout

vertex v2 = 100.2 40.3 40.0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

face f1 = [
\end_layout

\begin_layout Plain Layout

	v1,
\end_layout

\begin_layout Plain Layout

	v2	
\end_layout

\begin_layout Plain Layout

];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

face f1 = [
\end_layout

\begin_layout Plain Layout

	v1,
\end_layout

\begin_layout Plain Layout

	v2	
\end_layout

\begin_layout Plain Layout

];
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La faccia con tag f1 viene dichiarata due volte all'interno del codice,
 questo genera un errore di duplicazione.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ERROR 1: duplicated tag: f1
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Errore utilizzo di un tag inesistente
\end_layout

\begin_layout Standard
Nel caso di errore nel controllo in riutilizzo dei tag viene interrotto
 il parsing e visualizzato il messaggio di errore, contenente il tag non
 trovato.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

vertex v1 = 0.1 1.4 1.6;
\end_layout

\begin_layout Plain Layout

vertex v2 = 100.2 40.3 40.0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

face f1 = [
\end_layout

\begin_layout Plain Layout

	v1,
\end_layout

\begin_layout Plain Layout

	v2,
\end_layout

\begin_layout Plain Layout

	v3	
\end_layout

\begin_layout Plain Layout

];
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La faccia con tag f1 viene dichiarata utilizzando un vertice con tag v3,
 che non Ã¨ stato dichiarato in precedenza.
 Questo genera un errore di utilizzo di un tag inesistente.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ERROR 2: tag not found: v3
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Errore nel controllo di omogeneitÃ 
\end_layout

\begin_layout Standard
Nel caso di errore nel controllo di omogeneitÃ  viene interrotto il parsing
 e visualizzato il messaggio di errore.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

vertex v1 = 0.1 1.4 1.6;
\end_layout

\begin_layout Plain Layout

vertex v2 = 100.2 40.3 40.0;
\end_layout

\begin_layout Plain Layout

vertex v2 = 345.2 240.3 35.0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

face f1 = [
\end_layout

\begin_layout Plain Layout

	v1,
\end_layout

\begin_layout Plain Layout

	v2 deftex new (vtexture 0.5 0.5 0.5),
\end_layout

\begin_layout Plain Layout

	v3	
\end_layout

\begin_layout Plain Layout

];
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La faccia f1 Ã¨ stata definita con due vertici senza texture e uno con texture
 e quindi non rispetta il controllo di omogeneitÃ .
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ERROR 3: Not homogeneity error
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Grammatica ad attributi
\end_layout

\begin_layout Standard
La grammatica di objet Ã¨ decorata da una serie di attributi che vengono
 elaborati dal parser envirorment.
 In seguito Ã¨ riportato un esempio di utilizzo della grammatica ad attributi,
 applicato alla dichiarazione di una nuova informazione sui vertici.
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\series bold
\color red
num
\series default
\color inherit
 returns 
\series bold
\color blue
[float num]
\series default
\color inherit
 : 
\series bold
\color blue
s_num=
\series default
\color inherit
(INT|FLOAT) {
\series bold
\color blue
num
\series default
\color inherit
 = env.parseNumber(
\series bold
\color blue
s_num
\series default
\color inherit
);} ;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
\color red
vDef
\series default
\color inherit
 returns 
\series bold
\color blue
[Vertex3d v] 
\end_layout

\begin_layout Plain Layout
: 
\end_layout

\begin_layout Plain Layout
(
\series bold
\color blue
X=
\series default
\color inherit
num 
\series bold
\color blue
Y=
\series default
\color inherit
num 
\series bold
\color blue
Z=
\series default
\color inherit
num)
\end_layout

\begin_layout Plain Layout
{
\series bold
\color blue
v
\series default
\color inherit
=env.translateInVertex3d(
\series bold
\color blue
X
\series default
\color inherit
,
\series bold
\color blue
Y
\series default
\color inherit
,
\series bold
\color blue
Z
\series default
\color inherit
);} 
\end_layout

\begin_layout Plain Layout
;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
\color red
assignTag
\series default
\color inherit
 returns 
\series bold
\color blue
[String tag]
\series default
\color inherit
 : 
\series bold
\color blue
tag_t=
\series default
\color inherit
tagname equal {
\series bold
\color blue
tag=tag_t;
\series default
\color inherit
} ;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
\color red
singleDef
\series default
\color inherit
 
\series bold
\color blue
[String type]
\end_layout

\begin_layout Plain Layout
: 
\series bold
\color blue
tag_t=
\series default
\color inherit
assignTag 
\series bold
\color blue
v_t=
\series default
\color inherit
vDef
\end_layout

\begin_layout Plain Layout
{env.addNewVertexInfo(
\series bold
\color blue
type
\series default
\color inherit
, 
\series bold
\color blue
tag_t
\series default
\color inherit
, 
\series bold
\color blue
v_t
\series default
\color inherit
);}
\end_layout

\begin_layout Plain Layout
; 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
\color red
multipleDef
\series default
\color inherit
 
\series bold
\color blue
[String type]
\end_layout

\begin_layout Plain Layout
:
\end_layout

\begin_layout Plain Layout
LSB (singleDef
\series bold
\color blue
[type]
\series default
\color inherit
) (COMMA singleDef
\series bold
\color blue
[type]
\series default
\color inherit
)* RSB
\end_layout

\begin_layout Plain Layout
;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
\color red
vertexRule
\series default
\color inherit
 : VERTEX (multipleDef
\series bold
\color blue
["vertex"]
\series default
\color inherit
|singleDef
\series bold
\color blue
["vertex"]
\series default
\color inherit
)SC;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
\color red
vTextureRule
\series default
\color inherit
 : VTEXTURE (multipleDef
\series bold
\color blue
["texture"]
\series default
\color inherit
|singleDef
\series bold
\color blue
["texture"]
\series default
\color inherit
)SC;
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout

\series bold
\color red
vNormalRule
\series default
\color inherit
 : VNORMAL (multipleDef
\series bold
\color blue
["normal"]
\series default
\color inherit
|singleDef
\series bold
\color blue
["normal"]
\series default
\color inherit
)SC;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In blu sono evidenziati gli attributi della grammatica mentre in rosso sono
 evidenziate le regole alle quali gli attributi sono applicati.
\end_layout

\begin_layout Description
Regola
\begin_inset space ~
\end_inset

num: La regola num riconosce una stringa formattata come integer o come
 float e la assegna all'attributo s_num.
 L'attributo s_num viene passato alla funzione parseNumber(String s_num)
 del parser envirorment, che lo converte in un numero.
 L'attributo num contiene a questo punto la conversione della stringa riconusciu
ta dal parser come un float e viene passato nel returns della regola num.
\end_layout

\begin_layout Description
Regola
\begin_inset space ~
\end_inset

vDef: La regola vDef riconosce la definizione delle coordinate da attribure
 ad un informazione su un vertice.
 E' composta da tre call alla regola num, che ritornano tre valori float
 rispettivamente posti negli attributi X, Y e Z.
 Questi attributi vengono quindi passati alla funzione translateInVertex3d(float
 x, float y, float z) per essere convertiti in un oggetto piÃ¹ complesso
 di tipo Vertex3d.
 Tale oggetto contiene i valori delle tre coordinate relativi all'informazione
 sul vertice in corso di creazione e viene passato nel returns della regola
 vDef.
 
\end_layout

\begin_layout Description
Regola
\begin_inset space ~
\end_inset

assignTag: La regola assignTag riconosce in generale l'assegnamento di un
 tag.
 E' composta dal token tag e dal token equal.
 Questa regola ritorna attraverso l'attributo tag appunto il tag riconosciuto
 dal parser.
\end_layout

\begin_layout Description
Regola
\begin_inset space ~
\end_inset

singleDef: La regola singleDef riconosce in generale un informazione su
 un vertice.
 E' composta dalla regola assignTag, attraverso la quale viene riconosciuto
 il tag assegnato, e dalla regola vDef, attraverso la quale viene riconosciuto
 l'oggetto Vertex3d che contiene le coordinate del nuovo vertice.
 Questi attributi vengono quindi passati alla funzione addNewVertexInfo(String
 type, String tag, Vertex3d v) che esegue l'effettivo salvataggio del nuovo
 vertice creato.
 Il parametro type identifica che tipo di informazione sui vertici Ã¨ in
 corso di creazione (vertix, vTexture o vNormal) ed Ã¨ necessario al salvataggio
 del vertice nella struttura dati corretta.
\end_layout

\begin_layout Description
Regola
\begin_inset space ~
\end_inset

multipleDef: La regola multipleDef riconosce in generale una serie di informazio
ni sui vertici, definiti per comoditÃ  richiamando una sola volta la parola
 chiave VERTEX.
 E' composta dal token LSB (
\begin_inset Quotes eld
\end_inset

[
\begin_inset Quotes eld
\end_inset

), da una almeno una ripetizione della regola singleDef e dal token RSB
 (
\begin_inset Quotes eld
\end_inset

]
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Description
Regola
\begin_inset space ~
\end_inset

vertexRule: La regola vertexRule ricosce uno o piÃ¹ vertici.
 E' composta dal token VERTEX, seguito o dalla regola singleDef o dalle
 regola multipleDef e conclusa dal token SC.
 Le regole singleDef e multipleDef sono chiamate con parametro type di valore
 
\begin_inset Quotes eld
\end_inset

vertex
\begin_inset Quotes erd
\end_inset

, per notificare al parser envirorment che le informazioni sui vertici riconosci
ute dovranno essere salvate come vertici.
\end_layout

\begin_layout Description
Regola
\begin_inset space ~
\end_inset

vTextureRule: La regola vTextureRule ricosce uno o piÃ¹ coordinate di texture.
 E' composta dal token VTEXTURE, seguito o dalla regola singleDef o dalle
 regola multipleDef e conclusa dal token SC (
\begin_inset Quotes eld
\end_inset

;
\begin_inset Quotes erd
\end_inset

).
 Le regole singleDef e multipleDef sono chiamate con parametro type di valore
 
\begin_inset Quotes eld
\end_inset

texture
\begin_inset Quotes erd
\end_inset

, per notificare al parser envirorment che le informazioni sui vertici riconosci
ute dovranno essere salvate come coordinate di texture.
\end_layout

\begin_layout Description
Regola
\begin_inset space ~
\end_inset

vNormalRule: La regola vertexRule ricosce uno o piÃ¹ normali.
 E' composta dal token VNORMAL, seguito o dalla regola singleDef o dalle
 regola multipleDef e conclusa dal token SC (
\begin_inset Quotes eld
\end_inset

;
\begin_inset Quotes erd
\end_inset

).
 Le regole singleDef e multipleDef sono chiamate con parametro type di valore
 
\begin_inset Quotes eld
\end_inset

normal
\begin_inset Quotes erd
\end_inset

, per notificare al parser envirorment che le informazioni sui vertici riconosci
ute dovranno essere salvate come normali.
\end_layout

\begin_layout Standard
Dall'esempio precedente si evincono le tre principali tendenze nella modalitÃ 
 utilizzata per la grammatica di objet:
\end_layout

\begin_layout Enumerate

\series bold
Generalizzazione delle parti di regole comuni
\series default
: singleDef e multipleDef sono regole scritte una volta sola e riutilizzate
 per le tre diverse definizioni delle possibili informazioni sui vertici.
 Questo consente di snellire sia la grammatica, eliminando le parti ripetute,
 sia il parser envirorment, evitando di scrivere tre metodi differenti.
 Questa scelta va a discapito della complessitÃ  della regola singleDef che
 necessitÃ  di un attributo ulteriore per identificare che tipo di informazione
 sui vertici Ã¨ in corso di elaborazione.
 
\end_layout

\begin_layout Enumerate

\series bold
Preferenza al trattamento di oggetti complessi
\series default
: la regola vDef trasforma direttamente i tre numeri float delle coordinate
 in oggetto piÃ¹ complesso Vertex3d.
 La natura dell'oggetto Vertex3d, ossia se si tratta di un vertice, coordinate
 di texture o di una normale, viene successivamente specificata all'interno
 del parser envirorment al momento del salvataggio nella struttura dati.
\end_layout

\begin_layout Enumerate

\series bold
Creazione della struttura dati parallela al parsing
\series default
: la regola singleDef salva ogni informazione sui vertici man mano che il
 parser le riconosce.
 CiÃ² significa che la creazione della struttura dati avanza di pari passo
 con il parsing.
\end_layout

\begin_layout Standard
A conferma di quanto detto, in seguito Ã¨ riportato un ulteriore esempio
 relativo alla definizione dei gruppi di elementi grafici.
\end_layout

\begin_layout LyX-Code

\series bold
\size footnotesize
\color red
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code

\series bold
\size footnotesize
\color red
groupRule
\series default
\color inherit
 : GROUP 
\series bold
\color blue
groupTag=
\series default
\color inherit
assignTag
\end_layout

\begin_layout LyX-Code

\size footnotesize
             LSB
\end_layout

\begin_layout LyX-Code

\size footnotesize
              {env.initializeGroup(
\series bold
\color blue
groupTag
\series default
\color inherit
);}
\end_layout

\begin_layout LyX-Code

\size footnotesize
                  ((GraphElementName1=tagname|NEW LSB (
\end_layout

\begin_layout LyX-Code

\size footnotesize
                                
\series bold
\color blue
face1=
\series default
\color inherit
faceInLine
\end_layout

\begin_layout LyX-Code

\size footnotesize
                              | 
\series bold
\color blue
line1=
\series default
\color inherit
lineInLine
\end_layout

\begin_layout LyX-Code

\size footnotesize
                              | 
\series bold
\color blue
point1=
\series default
\color inherit
pointInLine
\end_layout

\begin_layout LyX-Code

\size footnotesize
                                   )
\end_layout

\begin_layout LyX-Code

\size footnotesize
                               RTB
\end_layout

\begin_layout LyX-Code

\size footnotesize
                    ) (DEFSMOOTH (
\series bold
\color blue
smooth_tag1=
\series default
\color inherit
tagname|smoothingInLine))?
\end_layout

\begin_layout LyX-Code

\size footnotesize
                            ) {env.addToTempGroup(
\series bold
\color blue
GraphElementName1, point1, line1, 
\end_layout

\begin_layout LyX-Code

\series bold
\size footnotesize
\color blue
                                                     face1, smooth_tag1
\series default
\color inherit
);}
\end_layout

\begin_layout LyX-Code

\size footnotesize
                       ((COMMA 
\series bold
\color blue
GraphElementName2=
\series default
\color inherit
tagname|NEW LSB (
\end_layout

\begin_layout LyX-Code

\size footnotesize
                                
\series bold
\color blue
face2=
\series default
\color inherit
faceInLine
\end_layout

\begin_layout LyX-Code

\size footnotesize
                              | 
\series bold
\color blue
line2=
\series default
\color inherit
lineInLine
\end_layout

\begin_layout LyX-Code

\size footnotesize
                              | 
\series bold
\color blue
point2=
\series default
\color inherit
pointInLine
\end_layout

\begin_layout LyX-Code

\size footnotesize
                                   )
\end_layout

\begin_layout LyX-Code

\size footnotesize
                               RTB
\end_layout

\begin_layout LyX-Code

\size footnotesize
                   ) (DEFSMOOTH (
\series bold
\color blue
smooth_tag2=
\series default
\color inherit
tagname|smoothingInLine))?
\end_layout

\begin_layout LyX-Code

\size footnotesize
                     {env.addToTempGroup(
\series bold
\color blue
GraphElementName2, point2, line2,
\end_layout

\begin_layout LyX-Code

\series bold
\size footnotesize
\color blue
                                            face2, smooth_tag2
\series default
\color inherit
);}
\end_layout

\begin_layout LyX-Code

\size footnotesize
                  )*
\end_layout

\begin_layout LyX-Code

\size footnotesize
             RSB SC
\end_layout

\begin_layout LyX-Code

\size footnotesize
             {env.saveGroup();}
\end_layout

\begin_layout LyX-Code

\size footnotesize
             ;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A sostegno delle affermazioni esposte precedentemente, Ã¨ possibile notare
 che la regola di grouping utilizza oggetti giÃ  complessi quali gli elementi
 grafici face, line e point ottenuti rispettivamente dalle regole faceInLine,
 lineInLine e pointInLine.
 Inoltre la costruzione del gruppo avviene in maniera progressiva attraverso
 quattro metodi del parser envirorment:
\end_layout

\begin_layout Enumerate
initializeGroup: viene creato un oggetto gruppo temporaneo nel quale vengono
 inseriti gli elementi grafici che fanno parte del nuovo gruppo;
\end_layout

\begin_layout Enumerate
addToTempGroup: viene aggiunto un elemento grafico nel nuovo gruppo;
\end_layout

\begin_layout Enumerate
saveGroup: salvataggio nella struttura dati del nuovo gruppo.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Architettura software
\end_layout

\begin_layout Subsection
Component diagram
\end_layout

\begin_layout Standard
L'architettura software si suddivide in quattro componenti principali:
\end_layout

\begin_layout Description
Parser
\begin_inset space ~
\end_inset

envirorment: questo componente viene richiamato dal parser generato da Antlr
 e si occupa di inserire nello storage component le informazioni sui vertici,
 gli elementi grafici e i gruppi riconosciuti dal parser.
\end_layout

\begin_layout Description
Storage
\begin_inset space ~
\end_inset

component: questo componente racchiude la struttura dati utilizzata per
 salvare tutti le informazioni sui vertici, gli elementi grafici e i gruppi
 riconosciuti dal parser.
\end_layout

\begin_layout Description
Translator
\begin_inset space ~
\end_inset

component: questo componente traduce la struttura dati contenuta nello storage
 component nel formato richiesto dallo standard obj.
\end_layout

\begin_layout Description
Printer
\begin_inset space ~
\end_inset

component: questo componente fornisce in output i dati tradotti dal translator
 component, in base alla destinazione richiesta (implementato per printing
 in console e su file obj).
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/00_overview diagram.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Component diagram overview
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Class diagram e dependency diagram
\end_layout

\begin_layout Subsubsection
Storage component
\end_layout

\begin_layout Standard
Lo storage component costruisce la struttura dati utilizzando oggetti appartenen
ti a tre gerarchie differenti:
\end_layout

\begin_layout Description
Informazioni
\begin_inset space ~
\end_inset

sui
\begin_inset space ~
\end_inset

vertici: la gerarchia delle informazioni sui vertici Ã¨ composta dagli elementi
 basilari dell'obj quali vertici, coordinate texture e normali.
\end_layout

\begin_layout Description
Elementi
\begin_inset space ~
\end_inset

grafici: la gerarchia degli elementi grafici descrive gli elementi grafici
 quali punti, linee e facce.
 Ognuno di questi componenti viene composto utilizzando oggetti che fanno
 parte della gerarchia sui vertici.
\end_layout

\begin_layout Description
Grouping: la gerarchia di grouping attualmente Ã¨ composta solamente dal
 tipo gruppo.
 Un gruppo Ã¨ composto da elementi grafici.
\end_layout

\begin_layout Paragraph
Gerarchia informazioni sui vertici
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/03_vertexInfo (dependency_autodiagram).png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Dependency diagram informazioni sui vertici
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/04_vertexInfo (structure_autodiagram).png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Class diagram informazioni sui vertici
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Gerarchia elementi grafici e grouping
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/05_graphelement (dependency_autodiagram).png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Dependency diagram elementi grafici
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/06_graphelement (structure_autodiagram).png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Class diagram elementi grafici
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Struttura dati componente di storage
\end_layout

\begin_layout Standard
La struttura dati del componente di storage Ã¨ suddivisa in due macro tipologie
 di struttura:
\end_layout

\begin_layout Enumerate
Struttura di salvataggio di elementi a cui 
\series bold
non Ã¨
\series default
 
\series bold
attribuito un tag
\series default
, identificata dalla label 
\begin_inset Quotes eld
\end_inset

notag
\begin_inset Quotes erd
\end_inset

.
 Per questa tipologia di struttura viene utilizzata una semplice lista.
\end_layout

\begin_layout Enumerate
Struttura di salvataggio di elementi a cui 
\series bold
Ã¨
\series default
 
\series bold
attribuito un tag
\series default
, identificata dalla label 
\begin_inset Quotes eld
\end_inset

tag
\begin_inset Quotes erd
\end_inset

.
 Per questa tipologia di struttura viene utilizzata una hashmap, per favorire
 la 
\series bold
velocitÃ  di ricerca
\series default
 di un oggetto per tag durante la fase di costruzione della struttura dati.
\end_layout

\begin_layout Standard
Questa scelta deriva dalla possibilitÃ  di poter dichiarare un elemento grafico
 senza tag.
 Per ogni tipologia di elemento grafico sono istanziate una struttura dati
 per tipologia, ossia una per memorizzare elementi senza tag e una per memorizza
re elementi con tag.
 A tale proposito la hashmap per gli elementi grafici con tag Ã¨ incapsulata
 nell'oggetto 
\shape italic
GraphElementsMapper
\shape default
, per condividere alcune funzionalitÃ  di controllo (ad esempio dei duplicati)
 tra le strutture dati di punti, linee e facce.
\end_layout

\begin_layout Standard
Le informazioni sui vertici di cui Ã¨ stato dichiarato un tag, vengono immagazzin
ate in una hashmap, sempre per favorire la velocitÃ  di ricerca al momento
 del loro riutilizzo.
 Le informazioni sui vertici di cui non Ã¨ stato dichiarato un tag (utilizzando
 la funzionalitÃ  di dichiarazione inline), sono intrinsecamente immagazzinate
 negli elementi grafici, di conseguenza non esiste una esplicitÃ  struttura
 dati per tali informazioni.
 Questa scelta deriva dal fatto che lo standard obj prevede di ignorare
 un informazione sui vertici, se non viene utilizzata almeno in un elemento
 grafico.
\end_layout

\begin_layout Standard
I gruppi devono sempre avere un tag e sono immagazzinati anch'essi in una
 hashmap.
 Anche in questo caso gli elementi grafici e le informazioni sui vertici
 che vengono dichiarate inline, sono intrinsecamente contenuti nell'oggetto
 gruppo e di conseguenza non hanno una struttura dati esplicita per il loro
 salvataggio.
\end_layout

\begin_layout Standard
Riguardo alla gestione dei tag, Ã¨ importante sottolineare che ogni qual
 volta un elemento grafico o un informazione sui vertici viene richiamata
 tramite tag, viene utilizzato un costrutture per copia per ricreare un
 istanza dell'oggetto con gli stessi dati ma diversi.
 Questo garantisce un 
\series bold
disaccoppiamento nella creazione di qualsiasi elemento del liguaggio
\series default
.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/01_storage (dependency_autodiagram).png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Dependency diagram componente di storage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/02_storage (structure_autodiagram).png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Class diagram componente di storage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Parser envirorment component
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/08_semantic (dependency_autodiagram).png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Dependency diagram parser envirorment component
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/09_semantic (structure_autodiagram).png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Class diagram parser envirorment component
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Translator component
\end_layout

\begin_layout Standard
Il componente translator si occupa di tradurre la struttura dati contenuta
 nello storage component nello standard obj.
 In sostanza fornisce una lista di String.
\end_layout

\begin_layout Standard
La caratteristica di maggior rilievo per questo componente Ã¨ l'
\series bold
ottimizzazione dei vertici a livello di elemento grafico o di gruppo
\series default
.
 Dato che il linguaggio favorisce il riutilizzo di informazioni sui vertici
 e di elementi grafici attraverso la definizione di un tag, Ã¨ facile incappare
 in situazioni in cui un vertice Ã¨ dichiarato una volta sola ma riutilizzato
 n volte in elementi grafici che possono essere richiamati all'interno dello
 stesso gruppo.
 Questa pratica genera una crescita del numero di vertici necessari per
 descrivere un insieme di elementi grafici che fanno parte di uno stesso
 gruppo.
 Per evitare di sovraccaricare il numero di informazioni sui vertici che
 devono essere esportate, il component translator si fa carico di eliminare
 i duplicati e di reindicizzare le informazioni grafiche contenute negli
 elementi grafici del gruppo.
 Questa funzionalitÃ  Ã¨ carico degli oggetti 
\shape italic
GraphElementsMap
\shape default
 e 
\shape italic
InfoMap
\shape default
.
\end_layout

\begin_layout Standard
A carico del componente translator vi Ã¨ invece la 
\series bold
scomposizione della struttura dati
\series default
 contenuta nel componente di storage e l'
\series bold
indicizzazione globale dei vertici
\series default
.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/10_translater (dependency_autodiagram).png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Dependency diagram translator component
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/11_translater (structure_autodiagram).png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Class diagram translator component
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Printer component
\end_layout

\begin_layout Standard
Il component di printer contiene l'interfaccia che gli oggetti printers
 devono implementare, che semplicemente definisce un metodo che prende in
 ingresso la lista di String generata dal componente translator.
 Per semplicitÃ  sono state implementati due printers differenti, uno per
 fare output in console (utile in fase di sviluppo) e uno per generare realmente
 il file obj.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/12_printer (structure_autodiagram).png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Class diagram printer component
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Gerarchia exception
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/14_exception (structure_autodiagram).png
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Class diagram informazioni sui vertici
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
